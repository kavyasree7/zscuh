/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.zscuh.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.zscuh.sample.PolicyAttView;
import com.zscuh.sample.PolicyAttViewId;


/**
 * ServiceImpl object for domain model class PolicyAttView.
 *
 * @see PolicyAttView
 */
@Service("SAMPLE.PolicyAttViewService")
@Validated
public class PolicyAttViewServiceImpl implements PolicyAttViewService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PolicyAttViewServiceImpl.class);


    @Autowired
    @Qualifier("SAMPLE.PolicyAttViewDao")
    private WMGenericDao<PolicyAttView, PolicyAttViewId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PolicyAttView, PolicyAttViewId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLETransactionManager")
    @Override
	public PolicyAttView create(PolicyAttView policyAttView) {
        LOGGER.debug("Creating a new PolicyAttView with information: {}", policyAttView);
        PolicyAttView policyAttViewCreated = this.wmGenericDao.create(policyAttView);
        return policyAttViewCreated;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public PolicyAttView getById(PolicyAttViewId policyattviewId) throws EntityNotFoundException {
        LOGGER.debug("Finding PolicyAttView by id: {}", policyattviewId);
        PolicyAttView policyAttView = this.wmGenericDao.findById(policyattviewId);
        if (policyAttView == null){
            LOGGER.debug("No PolicyAttView found with id: {}", policyattviewId);
            throw new EntityNotFoundException(String.valueOf(policyattviewId));
        }
        return policyAttView;
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public PolicyAttView findById(PolicyAttViewId policyattviewId) {
        LOGGER.debug("Finding PolicyAttView by id: {}", policyattviewId);
        return this.wmGenericDao.findById(policyattviewId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLETransactionManager")
	@Override
	public PolicyAttView update(PolicyAttView policyAttView) throws EntityNotFoundException {
        LOGGER.debug("Updating PolicyAttView with information: {}", policyAttView);
        this.wmGenericDao.update(policyAttView);

        PolicyAttViewId policyattviewId = new PolicyAttViewId();
        policyattviewId.setBank(policyAttView.getBank());
        policyattviewId.setBusBegin(policyAttView.getBusBegin());
        policyattviewId.setBusEnd(policyAttView.getBusEnd());
        policyattviewId.setSysBegin(policyAttView.getSysBegin());
        policyattviewId.setSysEnd(policyAttView.getSysEnd());
        policyattviewId.setTransId(policyAttView.getTransId());
        policyattviewId.setClient(policyAttView.getClient());
        policyattviewId.setType(policyAttView.getType());
        policyattviewId.setPay(policyAttView.getPay());

        return this.wmGenericDao.findById(policyattviewId);
    }

    @Transactional(value = "SAMPLETransactionManager")
	@Override
	public PolicyAttView delete(PolicyAttViewId policyattviewId) throws EntityNotFoundException {
        LOGGER.debug("Deleting PolicyAttView with id: {}", policyattviewId);
        PolicyAttView deleted = this.wmGenericDao.findById(policyattviewId);
        if (deleted == null) {
            LOGGER.debug("No PolicyAttView found with id: {}", policyattviewId);
            throw new EntityNotFoundException(String.valueOf(policyattviewId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Page<PolicyAttView> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all PolicyAttViews");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Page<PolicyAttView> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all PolicyAttViews");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE for table PolicyAttView to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}


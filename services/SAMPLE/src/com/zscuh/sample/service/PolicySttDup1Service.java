/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.zscuh.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.zscuh.sample.PolicySttDup1;
import com.zscuh.sample.PolicySttDup1Id;

/**
 * Service object for domain model class {@link PolicySttDup1}.
 */
public interface PolicySttDup1Service {

    /**
     * Creates a new PolicySttDup1. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on PolicySttDup1 if any.
     *
     * @param policySttDup1 Details of the PolicySttDup1 to be created; value cannot be null.
     * @return The newly created PolicySttDup1.
     */
	PolicySttDup1 create(@Valid PolicySttDup1 policySttDup1);


	/**
	 * Returns PolicySttDup1 by given id if exists.
	 *
	 * @param policysttdup1Id The id of the PolicySttDup1 to get; value cannot be null.
	 * @return PolicySttDup1 associated with the given policysttdup1Id.
     * @throws EntityNotFoundException If no PolicySttDup1 is found.
	 */
	PolicySttDup1 getById(PolicySttDup1Id policysttdup1Id) throws EntityNotFoundException;

    /**
	 * Find and return the PolicySttDup1 by given id if exists, returns null otherwise.
	 *
	 * @param policysttdup1Id The id of the PolicySttDup1 to get; value cannot be null.
	 * @return PolicySttDup1 associated with the given policysttdup1Id.
	 */
	PolicySttDup1 findById(PolicySttDup1Id policysttdup1Id);


	/**
	 * Updates the details of an existing PolicySttDup1. It replaces all fields of the existing PolicySttDup1 with the given policySttDup1.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on PolicySttDup1 if any.
     *
	 * @param policySttDup1 The details of the PolicySttDup1 to be updated; value cannot be null.
	 * @return The updated PolicySttDup1.
	 * @throws EntityNotFoundException if no PolicySttDup1 is found with given input.
	 */
	PolicySttDup1 update(@Valid PolicySttDup1 policySttDup1) throws EntityNotFoundException;

    /**
	 * Deletes an existing PolicySttDup1 with the given id.
	 *
	 * @param policysttdup1Id The id of the PolicySttDup1 to be deleted; value cannot be null.
	 * @return The deleted PolicySttDup1.
	 * @throws EntityNotFoundException if no PolicySttDup1 found with the given id.
	 */
	PolicySttDup1 delete(PolicySttDup1Id policysttdup1Id) throws EntityNotFoundException;

	/**
	 * Find all PolicySttDup1s matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PolicySttDup1s.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<PolicySttDup1> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all PolicySttDup1s matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PolicySttDup1s.
     *
     * @see Pageable
     * @see Page
	 */
    Page<PolicySttDup1> findAll(String query, Pageable pageable);

    /**
	 * Exports all PolicySttDup1s matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the PolicySttDup1s in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the PolicySttDup1.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}


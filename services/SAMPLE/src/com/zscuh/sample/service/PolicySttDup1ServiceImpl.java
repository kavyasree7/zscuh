/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.zscuh.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.zscuh.sample.PolicySttDup1;
import com.zscuh.sample.PolicySttDup1Id;


/**
 * ServiceImpl object for domain model class PolicySttDup1.
 *
 * @see PolicySttDup1
 */
@Service("SAMPLE.PolicySttDup1Service")
@Validated
public class PolicySttDup1ServiceImpl implements PolicySttDup1Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(PolicySttDup1ServiceImpl.class);


    @Autowired
    @Qualifier("SAMPLE.PolicySttDup1Dao")
    private WMGenericDao<PolicySttDup1, PolicySttDup1Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PolicySttDup1, PolicySttDup1Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLETransactionManager")
    @Override
	public PolicySttDup1 create(PolicySttDup1 policySttDup1) {
        LOGGER.debug("Creating a new PolicySttDup1 with information: {}", policySttDup1);
        PolicySttDup1 policySttDup1Created = this.wmGenericDao.create(policySttDup1);
        return policySttDup1Created;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public PolicySttDup1 getById(PolicySttDup1Id policysttdup1Id) throws EntityNotFoundException {
        LOGGER.debug("Finding PolicySttDup1 by id: {}", policysttdup1Id);
        PolicySttDup1 policySttDup1 = this.wmGenericDao.findById(policysttdup1Id);
        if (policySttDup1 == null){
            LOGGER.debug("No PolicySttDup1 found with id: {}", policysttdup1Id);
            throw new EntityNotFoundException(String.valueOf(policysttdup1Id));
        }
        return policySttDup1;
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public PolicySttDup1 findById(PolicySttDup1Id policysttdup1Id) {
        LOGGER.debug("Finding PolicySttDup1 by id: {}", policysttdup1Id);
        return this.wmGenericDao.findById(policysttdup1Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLETransactionManager")
	@Override
	public PolicySttDup1 update(PolicySttDup1 policySttDup1) throws EntityNotFoundException {
        LOGGER.debug("Updating PolicySttDup1 with information: {}", policySttDup1);
        this.wmGenericDao.update(policySttDup1);

        PolicySttDup1Id policysttdup1Id = new PolicySttDup1Id();
        policysttdup1Id.setBank(policySttDup1.getBank());
        policysttdup1Id.setClient(policySttDup1.getClient());

        return this.wmGenericDao.findById(policysttdup1Id);
    }

    @Transactional(value = "SAMPLETransactionManager")
	@Override
	public PolicySttDup1 delete(PolicySttDup1Id policysttdup1Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting PolicySttDup1 with id: {}", policysttdup1Id);
        PolicySttDup1 deleted = this.wmGenericDao.findById(policysttdup1Id);
        if (deleted == null) {
            LOGGER.debug("No PolicySttDup1 found with id: {}", policysttdup1Id);
            throw new EntityNotFoundException(String.valueOf(policysttdup1Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Page<PolicySttDup1> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all PolicySttDup1s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Page<PolicySttDup1> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all PolicySttDup1s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE for table PolicySttDup1 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}


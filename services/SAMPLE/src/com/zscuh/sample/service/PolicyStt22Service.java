/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.zscuh.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.zscuh.sample.PolicyStt22;
import com.zscuh.sample.PolicyStt22Id;

/**
 * Service object for domain model class {@link PolicyStt22}.
 */
public interface PolicyStt22Service {

    /**
     * Creates a new PolicyStt22. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on PolicyStt22 if any.
     *
     * @param policyStt22 Details of the PolicyStt22 to be created; value cannot be null.
     * @return The newly created PolicyStt22.
     */
	PolicyStt22 create(@Valid PolicyStt22 policyStt22);


	/**
	 * Returns PolicyStt22 by given id if exists.
	 *
	 * @param policystt22Id The id of the PolicyStt22 to get; value cannot be null.
	 * @return PolicyStt22 associated with the given policystt22Id.
     * @throws EntityNotFoundException If no PolicyStt22 is found.
	 */
	PolicyStt22 getById(PolicyStt22Id policystt22Id) throws EntityNotFoundException;

    /**
	 * Find and return the PolicyStt22 by given id if exists, returns null otherwise.
	 *
	 * @param policystt22Id The id of the PolicyStt22 to get; value cannot be null.
	 * @return PolicyStt22 associated with the given policystt22Id.
	 */
	PolicyStt22 findById(PolicyStt22Id policystt22Id);


	/**
	 * Updates the details of an existing PolicyStt22. It replaces all fields of the existing PolicyStt22 with the given policyStt22.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on PolicyStt22 if any.
     *
	 * @param policyStt22 The details of the PolicyStt22 to be updated; value cannot be null.
	 * @return The updated PolicyStt22.
	 * @throws EntityNotFoundException if no PolicyStt22 is found with given input.
	 */
	PolicyStt22 update(@Valid PolicyStt22 policyStt22) throws EntityNotFoundException;

    /**
	 * Deletes an existing PolicyStt22 with the given id.
	 *
	 * @param policystt22Id The id of the PolicyStt22 to be deleted; value cannot be null.
	 * @return The deleted PolicyStt22.
	 * @throws EntityNotFoundException if no PolicyStt22 found with the given id.
	 */
	PolicyStt22 delete(PolicyStt22Id policystt22Id) throws EntityNotFoundException;

	/**
	 * Find all PolicyStt22s matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PolicyStt22s.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<PolicyStt22> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all PolicyStt22s matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PolicyStt22s.
     *
     * @see Pageable
     * @see Page
	 */
    Page<PolicyStt22> findAll(String query, Pageable pageable);

    /**
	 * Exports all PolicyStt22s matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the PolicyStt22s in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the PolicyStt22.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}


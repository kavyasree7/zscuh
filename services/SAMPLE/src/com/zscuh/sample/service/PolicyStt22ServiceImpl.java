/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.zscuh.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.zscuh.sample.PolicyStt22;
import com.zscuh.sample.PolicyStt22Id;


/**
 * ServiceImpl object for domain model class PolicyStt22.
 *
 * @see PolicyStt22
 */
@Service("SAMPLE.PolicyStt22Service")
@Validated
public class PolicyStt22ServiceImpl implements PolicyStt22Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(PolicyStt22ServiceImpl.class);


    @Autowired
    @Qualifier("SAMPLE.PolicyStt22Dao")
    private WMGenericDao<PolicyStt22, PolicyStt22Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PolicyStt22, PolicyStt22Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLETransactionManager")
    @Override
	public PolicyStt22 create(PolicyStt22 policyStt22) {
        LOGGER.debug("Creating a new PolicyStt22 with information: {}", policyStt22);
        PolicyStt22 policyStt22Created = this.wmGenericDao.create(policyStt22);
        return policyStt22Created;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public PolicyStt22 getById(PolicyStt22Id policystt22Id) throws EntityNotFoundException {
        LOGGER.debug("Finding PolicyStt22 by id: {}", policystt22Id);
        PolicyStt22 policyStt22 = this.wmGenericDao.findById(policystt22Id);
        if (policyStt22 == null){
            LOGGER.debug("No PolicyStt22 found with id: {}", policystt22Id);
            throw new EntityNotFoundException(String.valueOf(policystt22Id));
        }
        return policyStt22;
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public PolicyStt22 findById(PolicyStt22Id policystt22Id) {
        LOGGER.debug("Finding PolicyStt22 by id: {}", policystt22Id);
        return this.wmGenericDao.findById(policystt22Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLETransactionManager")
	@Override
	public PolicyStt22 update(PolicyStt22 policyStt22) throws EntityNotFoundException {
        LOGGER.debug("Updating PolicyStt22 with information: {}", policyStt22);
        this.wmGenericDao.update(policyStt22);

        PolicyStt22Id policystt22Id = new PolicyStt22Id();
        policystt22Id.setBank(policyStt22.getBank());
        policystt22Id.setClient(policyStt22.getClient());

        return this.wmGenericDao.findById(policystt22Id);
    }

    @Transactional(value = "SAMPLETransactionManager")
	@Override
	public PolicyStt22 delete(PolicyStt22Id policystt22Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting PolicyStt22 with id: {}", policystt22Id);
        PolicyStt22 deleted = this.wmGenericDao.findById(policystt22Id);
        if (deleted == null) {
            LOGGER.debug("No PolicyStt22 found with id: {}", policystt22Id);
            throw new EntityNotFoundException(String.valueOf(policystt22Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Page<PolicyStt22> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all PolicyStt22s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Page<PolicyStt22> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all PolicyStt22s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE for table PolicyStt22 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}


/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.zscuh.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.zscuh.sample.PolicyStt;
import com.zscuh.sample.PolicySttId;


/**
 * ServiceImpl object for domain model class PolicyStt.
 *
 * @see PolicyStt
 */
@Service("SAMPLE.PolicySttService")
@Validated
public class PolicySttServiceImpl implements PolicySttService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PolicySttServiceImpl.class);


    @Autowired
    @Qualifier("SAMPLE.PolicySttDao")
    private WMGenericDao<PolicyStt, PolicySttId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PolicyStt, PolicySttId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLETransactionManager")
    @Override
	public PolicyStt create(PolicyStt policyStt) {
        LOGGER.debug("Creating a new PolicyStt with information: {}", policyStt);
        PolicyStt policySttCreated = this.wmGenericDao.create(policyStt);
        return policySttCreated;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public PolicyStt getById(PolicySttId policysttId) throws EntityNotFoundException {
        LOGGER.debug("Finding PolicyStt by id: {}", policysttId);
        PolicyStt policyStt = this.wmGenericDao.findById(policysttId);
        if (policyStt == null){
            LOGGER.debug("No PolicyStt found with id: {}", policysttId);
            throw new EntityNotFoundException(String.valueOf(policysttId));
        }
        return policyStt;
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public PolicyStt findById(PolicySttId policysttId) {
        LOGGER.debug("Finding PolicyStt by id: {}", policysttId);
        return this.wmGenericDao.findById(policysttId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLETransactionManager")
	@Override
	public PolicyStt update(PolicyStt policyStt) throws EntityNotFoundException {
        LOGGER.debug("Updating PolicyStt with information: {}", policyStt);
        this.wmGenericDao.update(policyStt);

        PolicySttId policysttId = new PolicySttId();
        policysttId.setBank(policyStt.getBank());
        policysttId.setClient(policyStt.getClient());

        return this.wmGenericDao.findById(policysttId);
    }

    @Transactional(value = "SAMPLETransactionManager")
	@Override
	public PolicyStt delete(PolicySttId policysttId) throws EntityNotFoundException {
        LOGGER.debug("Deleting PolicyStt with id: {}", policysttId);
        PolicyStt deleted = this.wmGenericDao.findById(policysttId);
        if (deleted == null) {
            LOGGER.debug("No PolicyStt found with id: {}", policysttId);
            throw new EntityNotFoundException(String.valueOf(policysttId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Page<PolicyStt> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all PolicyStts");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Page<PolicyStt> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all PolicyStts");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE for table PolicyStt to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}


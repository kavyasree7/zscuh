/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.zscuh.sample.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.zscuh.sample.PolicyStt22;
import com.zscuh.sample.PolicyStt22Id;
import com.zscuh.sample.service.PolicyStt22Service;


/**
 * Controller object for domain model class PolicyStt22.
 * @see PolicyStt22
 */
@RestController("SAMPLE.PolicyStt22Controller")
@Api(value = "PolicyStt22Controller", description = "Exposes APIs to work with PolicyStt22 resource.")
@RequestMapping("/SAMPLE/PolicyStt22")
public class PolicyStt22Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(PolicyStt22Controller.class);

    @Autowired
	@Qualifier("SAMPLE.PolicyStt22Service")
	private PolicyStt22Service policyStt22Service;

	@ApiOperation(value = "Creates a new PolicyStt22 instance.")
@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public PolicyStt22 createPolicyStt22(@RequestBody PolicyStt22 policyStt22) {
		LOGGER.debug("Create PolicyStt22 with information: {}" , policyStt22);

		policyStt22 = policyStt22Service.create(policyStt22);
		LOGGER.debug("Created PolicyStt22 with information: {}" , policyStt22);

	    return policyStt22;
	}

@ApiOperation(value = "Returns the PolicyStt22 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PolicyStt22 getPolicyStt22(@RequestParam("bank") String bank,@RequestParam("client") String client) throws EntityNotFoundException {

        PolicyStt22Id policystt22Id = new PolicyStt22Id();
        policystt22Id.setBank(bank);
        policystt22Id.setClient(client);

        LOGGER.debug("Getting PolicyStt22 with id: {}" , policystt22Id);
        PolicyStt22 policyStt22 = policyStt22Service.getById(policystt22Id);
        LOGGER.debug("PolicyStt22 details with id: {}" , policyStt22);

        return policyStt22;
    }



    @ApiOperation(value = "Updates the PolicyStt22 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PolicyStt22 editPolicyStt22(@RequestParam("bank") String bank,@RequestParam("client") String client, @RequestBody PolicyStt22 policyStt22) throws EntityNotFoundException {

        policyStt22.setBank(bank);
        policyStt22.setClient(client);

        LOGGER.debug("PolicyStt22 details with id is updated with: {}" , policyStt22);

        return policyStt22Service.update(policyStt22);
    }


    @ApiOperation(value = "Deletes the PolicyStt22 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePolicyStt22(@RequestParam("bank") String bank,@RequestParam("client") String client) throws EntityNotFoundException {

        PolicyStt22Id policystt22Id = new PolicyStt22Id();
        policystt22Id.setBank(bank);
        policystt22Id.setClient(client);

        LOGGER.debug("Deleting PolicyStt22 with id: {}" , policystt22Id);
        PolicyStt22 policyStt22 = policyStt22Service.delete(policystt22Id);

        return policyStt22 != null;
    }


    /**
     * @deprecated Use {@link #findPolicyStt22s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of PolicyStt22 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PolicyStt22> searchPolicyStt22sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PolicyStt22s list");
        return policyStt22Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PolicyStt22 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PolicyStt22> findPolicyStt22s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PolicyStt22s list");
        return policyStt22Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PolicyStt22 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PolicyStt22> filterPolicyStt22s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PolicyStt22s list");
        return policyStt22Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPolicyStt22s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return policyStt22Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of PolicyStt22 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPolicyStt22s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting PolicyStt22s");
		return policyStt22Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPolicyStt22AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return policyStt22Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PolicyStt22Service instance
	 */
	protected void setPolicyStt22Service(PolicyStt22Service service) {
		this.policyStt22Service = service;
	}

}


/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.zscuh.sample.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.zscuh.sample.PolicySttDup1;
import com.zscuh.sample.PolicySttDup1Id;
import com.zscuh.sample.service.PolicySttDup1Service;


/**
 * Controller object for domain model class PolicySttDup1.
 * @see PolicySttDup1
 */
@RestController("SAMPLE.PolicySttDup1Controller")
@Api(value = "PolicySttDup1Controller", description = "Exposes APIs to work with PolicySttDup1 resource.")
@RequestMapping("/SAMPLE/PolicySttDup1")
public class PolicySttDup1Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(PolicySttDup1Controller.class);

    @Autowired
	@Qualifier("SAMPLE.PolicySttDup1Service")
	private PolicySttDup1Service policySttDup1Service;

	@ApiOperation(value = "Creates a new PolicySttDup1 instance.")
@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public PolicySttDup1 createPolicySttDup1(@RequestBody PolicySttDup1 policySttDup1) {
		LOGGER.debug("Create PolicySttDup1 with information: {}" , policySttDup1);

		policySttDup1 = policySttDup1Service.create(policySttDup1);
		LOGGER.debug("Created PolicySttDup1 with information: {}" , policySttDup1);

	    return policySttDup1;
	}

@ApiOperation(value = "Returns the PolicySttDup1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PolicySttDup1 getPolicySttDup1(@RequestParam("bank") String bank,@RequestParam("client") String client) throws EntityNotFoundException {

        PolicySttDup1Id policysttdup1Id = new PolicySttDup1Id();
        policysttdup1Id.setBank(bank);
        policysttdup1Id.setClient(client);

        LOGGER.debug("Getting PolicySttDup1 with id: {}" , policysttdup1Id);
        PolicySttDup1 policySttDup1 = policySttDup1Service.getById(policysttdup1Id);
        LOGGER.debug("PolicySttDup1 details with id: {}" , policySttDup1);

        return policySttDup1;
    }



    @ApiOperation(value = "Updates the PolicySttDup1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PolicySttDup1 editPolicySttDup1(@RequestParam("bank") String bank,@RequestParam("client") String client, @RequestBody PolicySttDup1 policySttDup1) throws EntityNotFoundException {

        policySttDup1.setBank(bank);
        policySttDup1.setClient(client);

        LOGGER.debug("PolicySttDup1 details with id is updated with: {}" , policySttDup1);

        return policySttDup1Service.update(policySttDup1);
    }


    @ApiOperation(value = "Deletes the PolicySttDup1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePolicySttDup1(@RequestParam("bank") String bank,@RequestParam("client") String client) throws EntityNotFoundException {

        PolicySttDup1Id policysttdup1Id = new PolicySttDup1Id();
        policysttdup1Id.setBank(bank);
        policysttdup1Id.setClient(client);

        LOGGER.debug("Deleting PolicySttDup1 with id: {}" , policysttdup1Id);
        PolicySttDup1 policySttDup1 = policySttDup1Service.delete(policysttdup1Id);

        return policySttDup1 != null;
    }


    /**
     * @deprecated Use {@link #findPolicySttDup1s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of PolicySttDup1 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PolicySttDup1> searchPolicySttDup1sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PolicySttDup1s list");
        return policySttDup1Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PolicySttDup1 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PolicySttDup1> findPolicySttDup1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PolicySttDup1s list");
        return policySttDup1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PolicySttDup1 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PolicySttDup1> filterPolicySttDup1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PolicySttDup1s list");
        return policySttDup1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPolicySttDup1s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return policySttDup1Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of PolicySttDup1 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPolicySttDup1s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting PolicySttDup1s");
		return policySttDup1Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPolicySttDup1AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return policySttDup1Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PolicySttDup1Service instance
	 */
	protected void setPolicySttDup1Service(PolicySttDup1Service service) {
		this.policySttDup1Service = service;
	}

}


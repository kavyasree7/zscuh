/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.zscuh.sample.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.zscuh.sample.PolicyAtt1;
import com.zscuh.sample.PolicyAtt1Id;
import com.zscuh.sample.service.PolicyAtt1Service;


/**
 * Controller object for domain model class PolicyAtt1.
 * @see PolicyAtt1
 */
@RestController("SAMPLE.PolicyAtt1Controller")
@Api(value = "PolicyAtt1Controller", description = "Exposes APIs to work with PolicyAtt1 resource.")
@RequestMapping("/SAMPLE/PolicyAtt1")
public class PolicyAtt1Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(PolicyAtt1Controller.class);

    @Autowired
	@Qualifier("SAMPLE.PolicyAtt1Service")
	private PolicyAtt1Service policyAtt1Service;

	@ApiOperation(value = "Creates a new PolicyAtt1 instance.")
@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public PolicyAtt1 createPolicyAtt1(@RequestBody PolicyAtt1 policyAtt1) {
		LOGGER.debug("Create PolicyAtt1 with information: {}" , policyAtt1);

		policyAtt1 = policyAtt1Service.create(policyAtt1);
		LOGGER.debug("Created PolicyAtt1 with information: {}" , policyAtt1);

	    return policyAtt1;
	}

@ApiOperation(value = "Returns the PolicyAtt1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PolicyAtt1 getPolicyAtt1(@RequestParam("bank") String bank,@RequestParam("client") String client) throws EntityNotFoundException {

        PolicyAtt1Id policyatt1Id = new PolicyAtt1Id();
        policyatt1Id.setBank(bank);
        policyatt1Id.setClient(client);

        LOGGER.debug("Getting PolicyAtt1 with id: {}" , policyatt1Id);
        PolicyAtt1 policyAtt1 = policyAtt1Service.getById(policyatt1Id);
        LOGGER.debug("PolicyAtt1 details with id: {}" , policyAtt1);

        return policyAtt1;
    }



    @ApiOperation(value = "Updates the PolicyAtt1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PolicyAtt1 editPolicyAtt1(@RequestParam("bank") String bank,@RequestParam("client") String client, @RequestBody PolicyAtt1 policyAtt1) throws EntityNotFoundException {

        policyAtt1.setBank(bank);
        policyAtt1.setClient(client);

        LOGGER.debug("PolicyAtt1 details with id is updated with: {}" , policyAtt1);

        return policyAtt1Service.update(policyAtt1);
    }


    @ApiOperation(value = "Deletes the PolicyAtt1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePolicyAtt1(@RequestParam("bank") String bank,@RequestParam("client") String client) throws EntityNotFoundException {

        PolicyAtt1Id policyatt1Id = new PolicyAtt1Id();
        policyatt1Id.setBank(bank);
        policyatt1Id.setClient(client);

        LOGGER.debug("Deleting PolicyAtt1 with id: {}" , policyatt1Id);
        PolicyAtt1 policyAtt1 = policyAtt1Service.delete(policyatt1Id);

        return policyAtt1 != null;
    }


    /**
     * @deprecated Use {@link #findPolicyAtt1s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of PolicyAtt1 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PolicyAtt1> searchPolicyAtt1sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PolicyAtt1s list");
        return policyAtt1Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PolicyAtt1 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PolicyAtt1> findPolicyAtt1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PolicyAtt1s list");
        return policyAtt1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PolicyAtt1 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PolicyAtt1> filterPolicyAtt1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PolicyAtt1s list");
        return policyAtt1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPolicyAtt1s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return policyAtt1Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of PolicyAtt1 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPolicyAtt1s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting PolicyAtt1s");
		return policyAtt1Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPolicyAtt1AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return policyAtt1Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PolicyAtt1Service instance
	 */
	protected void setPolicyAtt1Service(PolicyAtt1Service service) {
		this.policyAtt1Service = service;
	}

}

